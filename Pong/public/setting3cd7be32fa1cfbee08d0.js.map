{"version":3,"file":"setting3cd7be32fa1cfbee08d0.js","mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,OAAO;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C","sources":["webpack://pong/./src/js/setting.js"],"sourcesContent":["//! ====== Default Settings and Initial Variables ======\r\nconst defaultSettings = {\r\n    difficulty: 'medium',\r\n    color: 'red',\r\n    obstacleState: 'on',\r\n    obstacleNumber: 5,\r\n};\r\n\r\n// Z-index variable for settings menu visibility control\r\nlet zIndex = -1000;\r\n\r\n//! ====== Cached HTML Elements ======\r\n// Cached HTML elements for settings\r\nconst settingButtonsObject = {\r\n    difficulty: {\r\n        easy: document.getElementById('easy-button'),\r\n        medium: document.getElementById('medium-button'),\r\n        hard: document.getElementById('hard-button'),\r\n    },\r\n    color: {\r\n        red: document.getElementById('red-option'),\r\n        green: document.getElementById('green-option'),\r\n        blue: document.getElementById('blue-option'),\r\n    },\r\n    obstacleState: {\r\n        on: document.getElementById('on-button'),\r\n        off: document.getElementById('off-button'),\r\n    }\r\n};\r\n\r\n// Cached input and display elements\r\nconst obstacleQuantityInput = document.getElementById('obstacle-quantity-input');\r\nconst obstacleQuantityDisplay = document.getElementById('obstacle-quantity');\r\nconst settingSection = document.getElementById('setting-section');\r\nconst settingButton = document.getElementById('setting-button');\r\nconst instructionSection = document.getElementById('instructions-section');\r\n\r\n//! ====== Settings Initialization ======\r\n// Set default settings in local storage\r\nfunction setDefaultSettings() {\r\n    localStorage.setItem('pongSettings', JSON.stringify(defaultSettings));\r\n    loadSettings();\r\n}\r\n\r\n// Load settings from local storage and update the UI to reflect the stored settings\r\nfunction loadSettings() {\r\n    const storedSettings = JSON.parse(localStorage.getItem('pongSettings'));\r\n\r\n    // Apply stored setting value to each button group\r\n    for (const buttonGroup in settingButtonsObject) {\r\n        const storedSettingsValue = storedSettings[buttonGroup];\r\n        toggleButton(settingButtonsObject[buttonGroup], storedSettingsValue);\r\n    }\r\n\r\n    // Display corresponding obstacle number stored in local storage\r\n    updateObstacleNumber(storedSettings.obstacleNumber);\r\n}\r\n\r\n//! ====== Utility Functions ======\r\n// Toggle button states based on the current active button in each group\r\nfunction toggleButton(targetButtonGroup, targetButton) {\r\n    for (const button in targetButtonGroup) {\r\n        targetButtonGroup[button].classList.toggle(`${button}-enabled`, button === targetButton);\r\n    }\r\n}\r\n\r\n// Update a specific setting in local storage and apply the new button state\r\nfunction updateSetting(targetSetting, newSettingValue) {\r\n    const storedSettings = JSON.parse(localStorage.getItem('pongSettings'));\r\n\r\n    // Update the setting value in local storage\r\n    storedSettings[targetSetting] = newSettingValue;\r\n    localStorage.setItem('pongSettings', JSON.stringify(storedSettings));\r\n\r\n    // Update the UI to reflect the new setting\r\n    toggleButton(settingButtonsObject[targetSetting], newSettingValue);\r\n}\r\n\r\n// Update the number of obstacles in local storage and what is displayed on the UI\r\nfunction updateObstacleNumber(quantity) {\r\n    const storedSettings = JSON.parse(localStorage.getItem('pongSettings'));\r\n\r\n    // Update UI based on quantity of obstacles then store it\r\n    storedSettings.obstacleNumber = quantity;\r\n    obstacleQuantityDisplay.textContent = quantity;\r\n    obstacleQuantityInput.value = quantity - 1;\r\n    localStorage.setItem('pongSettings', JSON.stringify(storedSettings));\r\n}\r\n\r\n// Show or hide the settings menu based on game status\r\nfunction toggleSettingsMenu() {\r\n    if (localStorage.getItem('isGameOn') === 'true') return;\r\n\r\n    zIndex = -zIndex\r\n    settingSection.style.zIndex = zIndex;\r\n}\r\n\r\n// Bind event listeners to each button to allow settings updates on click\r\nfunction bindEventListeners() {\r\n    for (const setting in settingButtonsObject) {\r\n        const buttonGroup = settingButtonsObject[setting];\r\n\r\n        // Attach a click event listener to each button in the group\r\n        for (const button in buttonGroup) {\r\n            buttonGroup[button].addEventListener('click', () => updateSetting(setting, button));\r\n        }\r\n    }\r\n}\r\n\r\n//! ====== Event Listeners ======\r\n// Toggle the settings menu on 'Escape' key press or settings button click\r\nwindow.addEventListener('keydown', (event) => {\r\n    if (event.key === 'Escape') toggleSettingsMenu();\r\n});\r\nsettingButton.addEventListener('click', toggleSettingsMenu);\r\n\r\n// Update obstacle number based on input value\r\nobstacleQuantityInput.addEventListener('input', (event) => {\r\n    updateObstacleNumber(Number(event.target.value) + 1);\r\n});\r\n\r\n//! ====== Initialize Settings on Page Load ======\r\n// Initialize settings and event listeners on page load\r\nfunction initializeSettings() {\r\n    // Load stored settings if available, otherwise apply default settings\r\n    localStorage.getItem('pongSettings') ? loadSettings() : setDefaultSettings();\r\n    bindEventListeners();\r\n}\r\n\r\nwindow.onload = () => {\r\n    initializeSettings();\r\n}"],"names":[],"sourceRoot":""}