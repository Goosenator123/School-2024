{"version":3,"file":"settingead237f1a29aff4a0b87.js","mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C,sDAAsD,OAAO;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,C","sources":["webpack://pong/./src/js/setting.js"],"sourcesContent":["// Default settings for the game, used if no previous settings are found in local storage\r\nconst defaultSettings = {\r\n    difficulty: 'medium',\r\n    color: 'red',\r\n    obstacleState: 'on',\r\n    obstacleNumber: 5,\r\n};\r\n\r\n// Zindex variable of setting\r\nlet zIndex = -1000;\r\n\r\n// HTML elements grouped by settings type\r\nconst settingButtonsObject = {\r\n    difficulty: {\r\n        easy: document.getElementById('easy-button'),\r\n        medium: document.getElementById('medium-button'),\r\n        hard: document.getElementById('hard-button'),\r\n    },\r\n    color: {\r\n        red: document.getElementById('red-option'),\r\n        green: document.getElementById('green-option'),\r\n        blue: document.getElementById('blue-option'),\r\n    },\r\n    obstacleState: {\r\n        on: document.getElementById('on-button'),\r\n        off: document.getElementById('off-button'),\r\n    }\r\n};\r\n\r\n// Other HTML elements cached\r\nconst obstacleQuantityInput = document.getElementById('obstacle-quantity-input');\r\nconst obstacleQuantityDisplay = document.getElementById('obstacle-quantity');\r\nconst settingSection = document.getElementById('setting-section');\r\nconst settingButton = document.getElementById('setting-button');\r\n\r\n// Set default settings in local storage\r\nfunction setDefaultSettings() {\r\n    localStorage.setItem('pongSettings', JSON.stringify(defaultSettings));\r\n    loadSettings();\r\n}\r\n\r\n// Load settings from local storage and update the UI to reflect the stored settings\r\nfunction loadSettings() {\r\n    const storedSettings = JSON.parse(localStorage.getItem('pongSettings'));\r\n    // Apply the stored setting value to each button group \r\n    for (const buttonGroup in settingButtonsObject) {\r\n        const storedSettingsValue = storedSettings[buttonGroup];\r\n        toggleButton(settingButtonsObject[buttonGroup], storedSettingsValue);\r\n    }\r\n    // Display corresponding obstacle number stored in local storage\r\n    updateObstacleNumber(storedSettings.obstacleNumber);\r\n}\r\n\r\n// Toggle button states based on the current active button in each group\r\nfunction toggleButton(targetButtonGroup, targetButton) {\r\n    // Loop through each button in the group to set the active state\r\n    for (const button in targetButtonGroup) {\r\n        // Toggle class for the target button; remove it from others in the group\r\n        targetButtonGroup[button].classList.toggle(`${button}-enabled`, button === targetButton);\r\n    }\r\n}\r\n\r\n// Update a specific setting in local storage and apply the new button state\r\nfunction updateSetting(targetSetting, newSettingValue) {\r\n    const storedSettings = JSON.parse(localStorage.getItem('pongSettings'));\r\n    // Update the setting value in local storage\r\n    storedSettings[targetSetting] = newSettingValue;\r\n    localStorage.setItem('pongSettings', JSON.stringify(storedSettings));\r\n    // Update the UI to reflect the new setting\r\n    toggleButton(settingButtonsObject[targetSetting], newSettingValue);\r\n}\r\n\r\n// Update the number of obstacles in local storage and what is displayed on the UI\r\nfunction updateObstacleNumber(quantity) {\r\n    const storedSettings = JSON.parse(localStorage.getItem('pongSettings'));\r\n    // Update UI based on quantity of obstacles then store it\r\n    storedSettings.obstacleNumber = quantity;\r\n    obstacleQuantityDisplay.textContent = quantity;\r\n    obstacleQuantityInput.value = quantity - 1;\r\n    localStorage.setItem('pongSettings', JSON.stringify(storedSettings));\r\n}\r\n\r\n// Bind event listeners to each button to allow settings updates on click\r\nfunction bindEventListeners() {\r\n    // Loop through each setting group (difficulty, color, obstacleState)\r\n    for (const setting in settingButtonsObject) {\r\n        const buttonGroup = settingButtonsObject[setting];\r\n        // Loop through each button in the group to attach a click event listener\r\n        for (const button in buttonGroup) {\r\n            // On click, update the specific setting with the selected button value\r\n            buttonGroup[button].addEventListener('click', () => updateSetting(setting, button));\r\n        }\r\n    }\r\n}\r\n\r\n// Function to show/hide the setting menu\r\nfunction showHideSettingMenu() {\r\n    zIndex = -zIndex;\r\n    settingSection.style.zIndex = zIndex;\r\n}\r\n\r\n// Execute when ESC key is pressed or setting button is clicked\r\nwindow.addEventListener('keydown', (event) => {\r\n    if (event.key !== 'Escape') return;\r\n    showHideSettingMenu();\r\n});\r\n\r\nsettingButton.addEventListener('click', showHideSettingMenu);\r\n\r\n// Initialize settings and event listeners on page load\r\nwindow.onload = () => {\r\n    // Load stored settings if available, otherwise apply default settings\r\n    localStorage.getItem('pongSettings') ? loadSettings() : setDefaultSettings();\r\n    bindEventListeners();\r\n}\r\n\r\n// Execute upon new input \r\nobstacleQuantityInput.addEventListener('input', (event) => {\r\n    const value = Number(event.target.value) + 1;\r\n    updateObstacleNumber(value);\r\n})"],"names":[],"sourceRoot":""}